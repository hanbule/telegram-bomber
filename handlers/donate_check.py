import asyncio
import json
from aiogram import types

import requests
from aiogram.utils import exceptions

from tools import tools, config, database
from tools.misc import dp, bot, logger


async def log(callback_query: types.CallbackQuery, dump, summ, comment, user_ip, region):
    latest_balance = json.loads(requests.get('https://donatepay.ru/api/v1/user',
                                             params={
                                                 "access_token": config.dp_token}
                                             ).text)

    while latest_balance['status'] == 'error':
        await asyncio.sleep(3)
        latest_balance = json.loads(requests.get('https://donatepay.ru/api/v1/user',
                                                 params={
                                                     "access_token": config.dp_token}
                                                 ).text)
    balance = latest_balance['data']['balance']
    total_cashout = latest_balance['data']['cashout_sum']

    text = f'<b>NEW PAYMENT</b>\n\n' \
           f'<a href="tg://user?id={dump["telegram_id"]}">{dump["full_name"]}</a> ' \
           f'<i>({dump["telegram_id"]})</i>\n\n' \
           f'<b>SUMM:</b> {summ} RUB (SUB - {config.sub_price} RUB)\n' \
           f'<b>COMMENT:</b> {comment}\n' \
           f'<b>IP:</b> {user_ip}\n' \
           f'<b>REGION:</b> {region}\n' \
           f'<b>BALANCE:</b> {balance} RUB\n' \
           f'<b>TOTAL CASHOUT:</b> {total_cashout + balance} RUB'

    logger('Donate', f'NEW PAYMENT\n\n'
                     f'{dump["full_name"]} '
                     f'({dump["telegram_id"]})\n\n'
                     f'SUMM: {summ} RUB (SUB - {config.sub_price} RUB)\n'
                     f'COMMENT: {comment}\n'
                     f'IP: {user_ip}\n'
                     f'REGION: {region}\n'
                     f'BALANCE: {balance} RUB\n'
                     f'TOTAL CASHOUT: {total_cashout + balance} RUB')

    kb = types.InlineKeyboardMarkup()
    profile = types.InlineKeyboardButton(
        "–ü—Ä–æ—Ñ–∏–ª—å",
        url=f'https://t.me/{callback_query.from_user.username}'
    )
    kb.row(profile)

    if callback_query.from_user.username is not None:
        await bot.send_message(config.payments_logs, text, parse_mode='html', reply_markup=kb)
    else:
        await bot.send_message(config.payments_logs, text, parse_mode='html')


@dp.callback_query_handler(lambda e: e.data.startswith('donate_check'))
async def donate_check_callback(callback_query: types.CallbackQuery):
    logger('Button', f'{tools.get_full_name(callback_query)} with id {callback_query.from_user.id} '
                     f'press button {callback_query.data}')

    try:
        await callback_query.answer(str(), False)
    except exceptions.InvalidQueryID:
        pass

    if callback_query.from_user.id in database.get_users()['sub_ids']:
        kb = types.InlineKeyboardMarkup()
        pay = types.InlineKeyboardButton(
            "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–ø–ª–∞—Ç—ã üí∞",
            url=config.buy_link
        )
        cancel = types.InlineKeyboardButton(
            "–ù–∞–∑–∞–¥ üîô",
            callback_data="start_message start"
        )
        kb.row(pay)
        kb.row(cancel)

        text = '<b>–î–æ–Ω–∞—Ç –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n' \
               f'<b>{tools.get_full_name(callback_query)}</b>, ' \
               f'–≤—ã —É–∂–µ –≤–ª–∞–¥–µ–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –Ω–∞—à –±–æ–º–±–µ—Ä! –¢–µ–º –Ω–µ ' \
               f'–º–µ–Ω–µ–µ, –µ—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å ' \
               f'–Ω–∞—à –ø—Ä–æ–µ–∫—Ç, —Ç–æ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∏–∂–µ üòâ. '

        try:
            return await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                               message_id=callback_query.message.message_id,
                                               text=text, parse_mode='html', reply_markup=kb)
        except exceptions.MessageNotModified:
            return

    kb = types.InlineKeyboardMarkup()
    pay = types.InlineKeyboardButton(
        "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–ø–ª–∞—Ç—ã üí∞",
        url=config.buy_link
    )
    check = types.InlineKeyboardButton(
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂ üí∞",
        callback_data="donate_check"
    )
    cancel = types.InlineKeyboardButton(
        "–ù–∞–∑–∞–¥ üîô",
        callback_data="start_message start"
    )
    kb.row(pay, check)
    kb.row(cancel)

    full_name = tools.get_full_name(callback_query)
    latest_donate = json.loads(requests.get('https://donatepay.ru/api/v1/transactions',
                                            params={
                                                "access_token": config.dp_token,
                                                "limit": 1,
                                                "type": "donation"
                                            }).text)

    if latest_donate['status'] == 'error':
        text = '<b>–î–æ–Ω–∞—Ç –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n' \
               f'{full_name}, –¥–∞–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ <b>—Ä–∞–∑ –≤ 20 —Å–µ–∫—É–Ω–¥</b>. ' \
               '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–¥–Ω–µ–µ. –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º, ' \
               '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>.'

        try:
            return await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                               message_id=callback_query.message.message_id,
                                               text=text, parse_mode='html', reply_markup=kb)
        except exceptions.MessageNotModified:
            return

    what = latest_donate['data'][0]['what']
    summ = int(float(latest_donate['data'][0]['sum']))
    comment = str(latest_donate['data'][0]['comment'])
    user_ip = str(latest_donate['data'][0]['vars']['user_ip'])

    if user_ip is not None:
        region = json.loads(requests.get('http://www.geoplugin.net/json.gp',
                                         params={
                                             "ip": user_ip
                                         }).text)
        if (region["geoplugin_regionName"] and region["geoplugin_city"]) != str():
            region = f'{region["geoplugin_countryName"]}, {region["geoplugin_regionName"]}, {region["geoplugin_city"]}'
        else:
            region = region["geoplugin_countryName"]
    else:
        region = 'Unknown'

    try:
        what = int(what)
    except (IndexError, ValueError):
        pass

    if not what == callback_query.from_user.id:
        text = '<b>–î–æ–Ω–∞—Ç –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n' \
               f'{full_name}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–¥–∞—Ç—å –í–∞–º –ø–æ–¥–ø–∏—Å–∫—É, ' \
               '—Ç–∞–∫ –∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π ' \
               '<b>–Ω–µ –Ω–∞—à–ª–∞ –í–∞—à –ø–ª–∞—Ç–µ–∂</b>. ' \
               '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.</b>'
        try:
            return await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                               message_id=callback_query.message.message_id,
                                               text=text, parse_mode='html', reply_markup=kb)
        except exceptions.MessageNotModified:
            return

    if summ < config.sub_price:
        text = '<b>–î–æ–Ω–∞—Ç –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n' \
               f'{full_name}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–¥–∞—Ç—å –í–∞–º –ø–æ–¥–ø–∏—Å–∫—É, ' \
               '—Ç–∞–∫ –∫–∞–∫ –í—ã –∑–∞–ø–ª–∞—Ç–∏–ª–∏ –º–µ–Ω–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö ' \
               f'<b>{config.sub_price} ‚ÇΩ</b>. ' \
               '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.</b>'
        try:
            await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                        message_id=callback_query.message.message_id,
                                        text=text, parse_mode='html', reply_markup=kb)
        except exceptions.MessageNotModified:
            pass

        dump = database.get_user(what)

        return await log(callback_query, dump, summ, comment, user_ip, region)

    ban_status = database.get_user(what)['ban_status']

    database.give_sub(what)

    kb = types.InlineKeyboardMarkup()
    cancel = types.InlineKeyboardButton(
        "–ù–∞–∑–∞–¥ üîô",
        callback_data="start_message start"
    )
    kb.row(cancel)

    text = '<b>–î–æ–Ω–∞—Ç –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n' \
           f'<b>{tools.get_full_name(callback_query)}</b>, ' \
           f'–±–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–∏—Å! ' \
           f'–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –µ–≥–æ, –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ —Ö–æ—Å—Ç–∏–Ω–≥. ' \
           f'–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤ –ø–æ–ª–Ω–æ–π –º–µ—Ä–µ, ' \
           f'<b>–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!</b>' + ('\n\n<b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞.</b>' if ban_status else str())

    try:
        await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                    message_id=callback_query.message.message_id,
                                    text=text, parse_mode='html', reply_markup=kb)
    except exceptions.MessageNotModified:
        pass

    dump = database.get_user(what)

    return await log(callback_query, dump, summ, comment, user_ip, region)
