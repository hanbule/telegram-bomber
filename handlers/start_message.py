import asyncio
import datetime
import json

import requests
import handlers.admin_panel
from aiogram import types, exceptions

from tools import tools, config, database

from tools.misc import dp, logger, bot, check_channel_sub


def generate_start_kb(user_name: (str, None)):
    kb = types.InlineKeyboardMarkup()
    profile = types.InlineKeyboardButton(
        "–ü—Ä–æ—Ñ–∏–ª—å üìñ",
        callback_data="start_message profile"
    )
    help_ = types.InlineKeyboardButton(
        "–ü–æ–º–æ—â—å üöë",
        callback_data="start_message help"
    )
    settings = types.InlineKeyboardButton(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô",
        callback_data="start_message settings"
    )
    stats = types.InlineKeyboardButton(
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üßª",
        callback_data="start_message stats"
    )
    ads = types.InlineKeyboardButton(
        "–†–µ–∫–ª–∞–º–∞ üéâ",
        callback_data="start_message ads"
    )
    donate = types.InlineKeyboardButton(
        "–î–æ–Ω–∞—Ç üí∞",
        callback_data="start_message donate"
    )
    about = types.InlineKeyboardButton(
        "–û –±–æ—Ç–µ üòé",
        callback_data="start_message about"
    )
    admin = types.InlineKeyboardButton(
        "–û–ü–ï–† –£–ü–ê–õ –ù–ê–ú–û–ß–ï–ù–ù–´–ô",
        callback_data="start_message admin"
    )

    kb.row(profile, help_, settings)
    kb.row(ads, donate, stats)

    if user_name in config.creators or user_name == config.support:
        kb.row(admin, about)
    else:
        kb.row(about)

    return kb


def generate_help_back_kb():
    kb = types.InlineKeyboardMarkup()
    cancel = types.InlineKeyboardButton(
        "–ù–∞–∑–∞–¥ üîô",
        callback_data="start_message help"
    )
    kb.row(cancel)
    return kb


def generate_donate_kb(sub=False):
    kb = types.InlineKeyboardMarkup()
    pay = types.InlineKeyboardButton(
        "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–ø–ª–∞—Ç—ã üí∞",
        url=config.buy_link
    )
    cancel = types.InlineKeyboardButton(
        "–ù–∞–∑–∞–¥ üîô",
        callback_data="start_message start"
    )

    if not sub:
        check = types.InlineKeyboardButton(
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂ üí∞",
            callback_data="donate_check"
        )
        kb.row(pay, check)
    else:
        kb.row(pay)

    kb.row(cancel)

    return kb


def generate_help_kb():
    kb = types.InlineKeyboardMarkup()

    button1 = types.InlineKeyboardButton(
        '–ó–∞–ø—É—Å–∫ –±–æ–º–±–µ—Ä–∞ üí£',
        callback_data="help launch_bomber"
    )

    button2 = types.InlineKeyboardButton(
        '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ üí∞',
        callback_data="help disable_mailing"
    )

    button4 = types.InlineKeyboardButton(
        '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞—Ç–∞–∫ ü¶†',
        callback_data="help stop_attack"
    )

    button5 = types.InlineKeyboardButton(
        '–î–æ–Ω–∞—Ç –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ üí∏',
        callback_data="start_message donate"
    )

    button6 = types.InlineKeyboardButton(
        '–ü—Ä–∏–≤—è–∑–∫–∞ –Ω–æ–º–µ—Ä–∞ üß≤',
        callback_data="help number_binding"
    )

    cancel = types.InlineKeyboardButton(
        "–ù–∞–∑–∞–¥ üîô",
        callback_data="start_message start"
    )

    kb.row(button1)
    kb.row(button2)
    kb.row(button4)
    kb.row(button5)
    kb.row(button6)
    kb.row(cancel)

    return kb


def generate_settings_kb(telegram_id: int):
    dump = database.get_user(telegram_id)

    kb = types.InlineKeyboardMarkup()

    mailing = types.InlineKeyboardButton(
        f"–ù–æ–≤–æ—Å—Ç–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ {'‚úÖ' if dump['settings']['mailing_status'] else '‚ùå'}",
        callback_data=f"settings mailing {True if not dump['settings']['mailing_status'] else False}"
    )

    proxy = types.InlineKeyboardButton(
        f"Proxy {'‚úÖ' if dump['settings']['proxy_status'] else '‚ùå'}",
        callback_data=f"settings proxy {True if not dump['settings']['proxy_status'] else False}"
    )

    time_out_title = types.InlineKeyboardButton(
        f"–¢–∞–π–º-–∞—É—Ç: {int(dump['settings']['timeout'])}s",
        callback_data="passed"
    )
    time_out_append = types.InlineKeyboardButton(
        "‚ûï",
        callback_data="settings timeout +"
    )
    time_out_remove = types.InlineKeyboardButton(
        "‚ûñ",
        callback_data="settings timeout -"
    )

    pause_title = types.InlineKeyboardButton(
        f"–ü–∞—É–∑–∞ –º–µ–∂–¥—É –°–ú–°: {int(dump['settings']['pause'])}s",
        callback_data="passed"
    )
    pause_append = types.InlineKeyboardButton(
        "‚ûï",
        callback_data="settings pause +"
    )
    pause_remove = types.InlineKeyboardButton(
        "‚ûñ",
        callback_data="settings pause -"
    )

    cycles_title = types.InlineKeyboardButton(
        f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤: {int(dump['settings']['default_cycles'])}",
        callback_data="passed"
    )
    cycles_append = types.InlineKeyboardButton(
        "‚ûï",
        callback_data="settings cycles +"
    )
    cycles_remove = types.InlineKeyboardButton(
        "‚ûñ",
        callback_data="settings cycles -"
    )

    phone = types.InlineKeyboardButton(
        "–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω ‚ùå",
        callback_data="settings phone"
    )

    cancel = types.InlineKeyboardButton(
        "–ù–∞–∑–∞–¥ üîô",
        callback_data="start_message start"
    )

    kb.row(mailing)
    kb.row(proxy)
    kb.row(time_out_title)
    kb.row(time_out_remove, time_out_append)
    kb.row(pause_title)
    kb.row(pause_remove, pause_append)
    kb.row(cycles_title)
    kb.row(cycles_remove, cycles_append)
    if dump['settings']['attached_phone_number'] is not None:
        kb.row(phone)
    kb.row(cancel)

    return kb


def generate_cancel_kb():
    kb = types.InlineKeyboardMarkup()
    cancel = types.InlineKeyboardButton(
        "–ù–∞–∑–∞–¥ üîô",
        callback_data="start_message start"
    )
    kb.row(cancel)

    return kb


def generate_profile_text(user: int):
    dump = database.get_user(user)

    sub = 'TRIAL' if not dump['sub_status'] else 'FULL'
    cycles = config.trial_cycles_count if not dump['sub_status'] else config.sub_cycles_count
    starts = dump["trial_start_count"] if not dump['sub_status'] else "‚àû"
    admin = user in database.get_users()['admin_ids']
    admin_status = 'YES' if admin else 'NO'
    ban_status = 'YES' if dump['ban_status'] else 'NO'
    user_name = dump['user_name']
    attached_phone_number = dump['settings']['attached_phone_number']
    reg_time = None
    buy_time = None

    try:
        reg_time = datetime.datetime.fromtimestamp(dump['reg_time']).strftime('%d.%m.%Y %H:%M:%S') + ' MSK'
        buy_time = datetime.datetime.fromtimestamp(dump['buy_time']).strftime('%d.%m.%Y %H:%M:%S') + ' MSK'
    except (AttributeError, TypeError):
        pass

    text = f'<b>{dump["full_name"]}</b> <i>({dump["telegram_id"]})</i>\n\n'
    text += f'<b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{user_name}\n\n' if user_name is not None else str()
    text += f'<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {sub}\n'
    text += f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤:</b> {cycles}\n'
    text += f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤:</b> {starts}\n\n'
    text += f'<b>–°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b> {admin_status}\n'
    text += f'<b>–°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {ban_status}\n\n'
    text += f'<b>–í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_time}\n' if reg_time is not None else str()
    text += f'<b>–í—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏:</b> {buy_time}\n' if buy_time is not None else str()
    text += f'\n<b>–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b> {attached_phone_number}' if attached_phone_number is not None else str()

    return text


@dp.callback_query_handler(lambda e: e.data.startswith('start_message'))
async def start_callback(callback_query: types.CallbackQuery):
    logger('Button', f'{tools.get_full_name(callback_query)} with id {callback_query.from_user.id} '
                     f'press button {callback_query.data}')

    try:
        await callback_query.answer(str(), False)
    except exceptions.InvalidQueryID:
        pass

    message_type = callback_query.data.split(' ', maxsplit=1)[1]

    if message_type == 'help':
        text = '<b>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:</b>'

        if await check_channel_sub(callback_query.from_user.id, True):
            text += f'\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <b>@{config.channel}</b>, —á—Ç–æ –±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! ' \
                    f'(–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø–∞–¥–µ—Ç –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª).'

        try:
            return await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                               message_id=callback_query.message.message_id,
                                               text=text, parse_mode='html', reply_markup=generate_help_kb())
        except exceptions.MessageNotModified:
            return

    if message_type == 'donate':
        if callback_query.from_user.id in database.get_users()['sub_ids']:
            text = '<b>–î–æ–Ω–∞—Ç –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n' \
                   f'<b>{tools.get_full_name(callback_query)}</b>, ' \
                   f'–≤—ã —É–∂–µ –≤–ª–∞–¥–µ–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –Ω–∞—à –±–æ–º–±–µ—Ä! –¢–µ–º –Ω–µ ' \
                   f'–º–µ–Ω–µ–µ, –µ—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å ' \
                   f'–Ω–∞—à –ø—Ä–æ–µ–∫—Ç, —Ç–æ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∏–∂–µ üòâ. '

            try:
                return await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                                   message_id=callback_query.message.message_id,
                                                   text=text, parse_mode='html',
                                                   reply_markup=generate_donate_kb(
                                                       callback_query.from_user.id in database.get_users()['sub_ids'])
                                                   )
            except exceptions.MessageNotModified:
                return

        telegram_id = callback_query.from_user.id

        text = '<b>–î–æ–Ω–∞—Ç –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n' \
               '–ù–∞—à —Å–µ—Ä–≤–∏—Å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º. –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å –Ω–µ —É –≤—Å–µ—Ö. ' \
               f'–ù–æ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à –ø—Ä–æ–µ–∫—Ç –∏ –ø—Ä–∏ –¥–æ–Ω–∞—Ç–µ –æ—Ç <b>{config.sub_price} ‚ÇΩ</b> ' \
               '(–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂) –Ω–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø.\n\n' \
               '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å <b>DonatePay</b>, –≤ –∫–æ—Ç–æ—Ä–æ–º ' \
               '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã: QIWI, Apple Pay, ' \
               'Google Pay, Visa, MC, WebMoney, –Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏, BTC –∏ —Ç. –¥. ' \
               '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–µ –∏ –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–µ –∫–∞—Ä—Ç—ã <b>—Ç–∞–∫–∂–µ –æ–±—Å–ª—É–∂–∏–≤–∞—é—Ç—Å—è</b> —Å–µ—Ä–≤–∏—Å–æ–º.\n\n' \
               f'–í –ø–æ–ª–µ "–í–∞—à–µ –∏–º—è" –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ - <b>{telegram_id}</b> ' \
               '–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂". ' \
               '–ï—Å–ª–∏ –≤—ã –≤—Å–µ —Å–¥–µ–ª–∞–ª–∏ –≤–µ—Ä–Ω–æ - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ' \
               '–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è. –í –¥—Ä—É–≥–æ–º —Å–ª—É—á–∞–µ - –≤–∞–º —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö. ' \
               '–ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä—É—á–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.\n\n–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–∞–µ—Ç –≤–∞–º:\n' \
               '1.<b> –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤</b>\n' \
               f'2.<b>–î–æ {config.sub_cycles_count} —Ü–∏–∫–ª–æ–≤</b>\n' \
               '3.<b> –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–∫—Å–∏</b> (–í–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏—Ö–æ–¥–∏–º—ã—Ö SMS –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏)\n' \
               '4.<b> –ü–æ–ª–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã, –∫–∞–∫ —Ä–µ–∫–ª–∞–º—É –Ω–∞—à–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, —Ç–∞–∫ –∏ —Ä–µ–∫–ª–∞–º—É –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.</b>'

        try:
            return await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                               message_id=callback_query.message.message_id,
                                               text=text, parse_mode='html',
                                               reply_markup=generate_donate_kb(
                                                   callback_query.from_user.id in database.get_users()['sub_ids'])
                                               )
        except exceptions.MessageNotModified:
            return

    if message_type == 'ads':
        kb = types.InlineKeyboardMarkup()
        support = types.InlineKeyboardButton(
            "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            url=f'https://t.me/{config.support}'
        )
        cancel = types.InlineKeyboardButton(
            "–ù–∞–∑–∞–¥ üîô",
            callback_data="start_message start"
        )
        kb.row(support)
        kb.row(cancel)

        text = '<b>–ü–æ–∫—É–ø–∫–∞ —Ä–µ–∫–ª–∞–º—ã –≤ —Ä–∞—Å—Å—ã–ª–∫–∞—Ö</b>\n\n' \
               '–° –ø–æ—Å–ª–µ–¥–Ω–∏–º –∫—Ä—É–ø–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –Ω–∞—à –±–æ—Ç ' \
               '–ø–æ–ª—É—á–∏–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å <b>—Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π ' \
               '—Ä–µ–∫–ª–∞–º—ã</b>. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ' \
               '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª–µ–µ ' \
               f'{int(round(len(database.get_users()["telegram_ids"]) * config.users_multiplier, -1))} ' \
               f'–∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ—Ç —Å –∫–∞–∂–¥—ã–π ' \
               '–¥–Ω–µ–º.\n\n<b>–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –∫—É–ø–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?</b>\n\n1. ' \
               '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ –¥–æ–≤–æ–ª—å–Ω–æ ' \
               '—É–∑–∫–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏\n2. –î–∞–∂–µ —Å —É—á–µ—Ç–æ–º 1-–≥–æ –ø—É–Ω–∫—Ç–∞, ' \
               '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–≤–æ–ª—å–Ω–æ –≤–µ–ª–∏–∫–æ\n3. ' \
               '–¶–µ–Ω–∞ –∑–∞ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä—É—é –º—ã –≤–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –º–∞–ª–∞ ' \
               '–≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏\n4. –ú—ã –∏–º–µ–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ ' \
               '—Å–æ–æ–±—â–µ–Ω–∏–π, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–° ' \
               '–æ–±—Ä–∞—â–µ–Ω–∏–µ–º –ø–æ –∏–º–µ–Ω–∏, –Ω–∏–∫–Ω–µ–π–º—É), –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ ' \
               '—Å–æ–æ–±—â–µ–Ω–∏–µ URL –∫–Ω–æ–ø–æ–∫ –≤–ø–ª–æ—Ç—å –¥–æ 9-—Ç–∏ —à—Ç—É–∫ –∏ —Ñ–æ—Ç–æ.\n\n–¶–µ–Ω–∞ ' \
               f'–æ–¥–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç <b>{config.smm_price} ‚ÇΩ</b>.' \
               '\n\n–ú—ã –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ –º—ã –¥–æ–ª–∂–Ω—ã –∑–∞—Å–ª—É–∂–∏—Ç—å –≤–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ ' \
               '–∏ –æ–∫—É–ø–∏—Ç—å –≤–∞–º –¥–∞–Ω–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É, –ø–æ—ç—Ç–æ–º—É –Ω–∞ –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ ' \
               '—Ä–∞—Å—Å—ã–ª–∫–∏ <b>–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ - 50%</b>. –ù–∞ –º–∞—Å—Å–æ–≤—ã–µ ' \
               '—Ä–∞—Å—Å—ã–ª–∫–∏ (–ë–æ–ª–µ–µ 3—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∑–∞ —Ä–∞–∑) —Ç–∞–∫–∂–µ –¥–µ–π—Å—Ç–≤—É—é—Ç ' \
               '—Å–∫–∏–¥–∫–∏.\n\n–†–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 1-–π —à—Ç—É–∫–∏ –≤ ' \
               '–¥–µ–Ω—å. –ï—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏. –ï—Å–ª–∏ –¥–µ–Ω—å ' \
               '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω, –ø—Ä–∏–¥–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫—É.\n\n–ï—Å–ª–∏ ' \
               '–≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å –≤ –ø–æ–∫—É–ø–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏, –æ—Å—Ç–∞–≤—å—Ç–µ ' \
               '–∑–∞—è–≤–∫—É, –Ω–∞–ø–∏—Å–∞–≤ –Ω–∞–º –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.'

        try:
            return await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                               message_id=callback_query.message.message_id,
                                               text=text, parse_mode='html', reply_markup=kb)
        except exceptions.MessageNotModified:
            return

    if message_type == 'profile':
        text = generate_profile_text(callback_query.from_user.id)

        if await check_channel_sub(callback_query.from_user.id, True):
            text += f'\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <b>@{config.channel}</b>, —á—Ç–æ –±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! ' \
                    f'(–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø–∞–¥–µ—Ç –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª).'

        try:
            return await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                               message_id=callback_query.message.message_id,
                                               text=text, parse_mode='html', reply_markup=generate_cancel_kb())
        except exceptions.MessageNotModified:
            return

    if message_type == 'stats':
        dump_get_users = database.get_users()
        user_name = callback_query.from_user.username

        users_quantity = round(len(dump_get_users["telegram_ids"]) * config.users_multiplier)
        subs_quantity = len(dump_get_users["sub_ids"])
        mailing_quantity = len(dump_get_users["mailing_ids"])
        ban_quantity = len(dump_get_users["banned_ids"])
        proxy_quantity = len(database.get_proxys())
        services_quantity = round(len(tools.load_services()) * config.services_multiplier)

        text = f'<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n' \
               f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {users_quantity}\n' \
               f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {subs_quantity}\n' \
               f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É:</b> {mailing_quantity}\n' \
               f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–∞–Ω–µ–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {ban_quantity}\n' \
               f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤:</b> {services_quantity}\n' \
               f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Proxy:</b> {proxy_quantity}'

        if user_name in config.creators or user_name == config.support:
            kb = types.InlineKeyboardMarkup()
            kb.row(types.InlineKeyboardButton(
                "Wait... üîô",
                callback_data="passed"
            ))
            text = f'<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n' \
                   f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {users_quantity}\n' \
                   f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {subs_quantity}\n' \
                   f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É:</b> {mailing_quantity}\n' \
                   f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–∞–Ω–µ–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {ban_quantity}\n' \
                   f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤:</b> {services_quantity}\n' \
                   f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Proxy:</b> {proxy_quantity}\n\n' \
                   f'<b>–ë–∞–ª–∞–Ω—Å DonatePay:</b> –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫ DonatePay...\n' \
                   f'<b>–û–±—â–∏–π –¥–æ—Ö–æ–¥ —Å –±–æ—Ç–∞:</b> –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫ DonatePay...'

            try:
                await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                            message_id=callback_query.message.message_id,
                                            text=text, parse_mode='html', reply_markup=kb)
            except exceptions.MessageNotModified:
                pass

            latest_balance = json.loads(requests.get('https://donatepay.ru/api/v1/user',
                                                     params={
                                                         "access_token": config.dp_token}
                                                     ).text)

            while latest_balance['status'] == 'error':
                await asyncio.sleep(3)
                latest_balance = json.loads(requests.get('https://donatepay.ru/api/v1/user',
                                                         params={
                                                             "access_token": config.dp_token}
                                                         ).text)
            balance = latest_balance['data']['balance']
            total_cashout = latest_balance['data']['cashout_sum']

            text = f'<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n' \
                   f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {users_quantity}\n' \
                   f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {subs_quantity}\n' \
                   f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É:</b> {mailing_quantity}\n' \
                   f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–∞–Ω–µ–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {ban_quantity}\n' \
                   f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤:</b> {services_quantity}\n' \
                   f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ Proxy:</b> {proxy_quantity}\n\n' \
                   f'<b>–ë–∞–ª–∞–Ω—Å DonatePay:</b> {balance} ‚ÇΩ\n' \
                   f'<b>–û–±—â–∏–π –¥–æ—Ö–æ–¥ —Å –±–æ—Ç–∞:</b> {balance + total_cashout} ‚ÇΩ'

        else:
            if await check_channel_sub(callback_query.from_user.id, True):
                text += f'\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <b>@{config.channel}</b>, —á—Ç–æ –±—ã ' \
                        f'–Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! (–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø–∞–¥–µ—Ç –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª).'

        try:
            return await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                               message_id=callback_query.message.message_id,
                                               text=text, parse_mode='html', reply_markup=generate_cancel_kb())
        except exceptions.MessageNotModified:
            return

    if message_type == 'start':
        text = '<b>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:</b>'

        if await check_channel_sub(callback_query.from_user.id, True):
            text += f'\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <b>@{config.channel}</b>, —á—Ç–æ –±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! ' \
                    f'(–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø–∞–¥–µ—Ç –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª).'

        try:
            return await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                               message_id=callback_query.message.message_id,
                                               text=text, parse_mode='html',
                                               reply_markup=generate_start_kb(callback_query.from_user.username))
        except exceptions.MessageNotModified:
            return

    if message_type == 'about':
        me = await bot.get_me()

        text = f'<b>{me["first_name"]} v{config.version}</b>\n\n' \
               f'<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @{config.support}\n' \
               f'<b>–ö–∞–Ω–∞–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏:</b> @{config.channel}'

        if await check_channel_sub(callback_query.from_user.id, True):
            text += f'\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <b>@{config.channel}</b>, —á—Ç–æ –±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! ' \
                    f'(–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø–∞–¥–µ—Ç –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª).'

        try:
            return await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                               message_id=callback_query.message.message_id,
                                               text=text, parse_mode='html', reply_markup=generate_cancel_kb())
        except exceptions.MessageNotModified:
            return

    if message_type == 'settings':
        text = "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>"

        if await check_channel_sub(callback_query.from_user.id, True):
            text += f'\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª <b>@{config.channel}</b>, —á—Ç–æ –±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! ' \
                    f'(–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø–∞–¥–µ—Ç –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª).'

        try:
            return await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                               message_id=callback_query.message.message_id,
                                               text=text, parse_mode='html',
                                               reply_markup=generate_settings_kb(callback_query.from_user.id))
        except exceptions.MessageNotModified:
            return

    if message_type == 'admin':
        text = '<b>–ê–£–ï</b><a href="https://baltnews.ee/images/101779/83/1017798349.jpg">&#8204;</a>'

        try:
            return await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                               message_id=callback_query.message.message_id,
                                               text=text, parse_mode='html',
                                               reply_markup=handlers.admin_panel.generate_admin_kb())
        except exceptions.MessageNotModified:
            return
